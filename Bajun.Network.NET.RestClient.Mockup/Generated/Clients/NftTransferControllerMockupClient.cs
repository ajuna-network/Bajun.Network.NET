//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bajun.Network.NET.RestClient.Mockup.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Bajun.Network.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Bajun.Network.NET.NetApiExt.Generated.Model.pallet_ajuna_nft_transfer.pallet;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Bajun.Network.NET.RestClient.Mockup.Generated.Interfaces;
   
   public sealed class NftTransferControllerMockupClient : MockupBaseClient, INftTransferControllerMockupClient
   {
      private HttpClient _httpClient;
      public NftTransferControllerMockupClient(HttpClient httpClient)
      {
         _httpClient = httpClient;
      }
      public async Task<bool> SetOrganizer(AccountId32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "NftTransfer/Organizer", value.Encode(), Bajun.Network.NET.NetApiExt.Generated.Storage.NftTransferStorage.OrganizerParams());
      }
      public async Task<bool> SetLockedState(EnumPalletLockedState value)
      {
         return await SendMockupRequestAsync(_httpClient, "NftTransfer/LockedState", value.Encode(), Bajun.Network.NET.NetApiExt.Generated.Storage.NftTransferStorage.LockedStateParams());
      }
      public async Task<bool> SetNextItemId(U128 value, U32 key)
      {
         return await SendMockupRequestAsync(_httpClient, "NftTransfer/NextItemId", value.Encode(), Bajun.Network.NET.NetApiExt.Generated.Storage.NftTransferStorage.NextItemIdParams(key));
      }
      public async Task<bool> SetLockItemStatus(EnumNftStatus value, Ajuna.NetApi.Model.Types.Base.BaseTuple<U32, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "NftTransfer/LockItemStatus", value.Encode(), Bajun.Network.NET.NetApiExt.Generated.Storage.NftTransferStorage.LockItemStatusParams(key));
      }
      public async Task<bool> SetHoldingAccount(AccountId32 value)
      {
         return await SendMockupRequestAsync(_httpClient, "NftTransfer/HoldingAccount", value.Encode(), Bajun.Network.NET.NetApiExt.Generated.Storage.NftTransferStorage.HoldingAccountParams());
      }
      public async Task<bool> SetNftClaimants(AccountId32 value, Ajuna.NetApi.Model.Types.Base.BaseTuple<U32, U128> key)
      {
         return await SendMockupRequestAsync(_httpClient, "NftTransfer/NftClaimants", value.Encode(), Bajun.Network.NET.NetApiExt.Generated.Storage.NftTransferStorage.NftClaimantsParams(key));
      }
   }
}
